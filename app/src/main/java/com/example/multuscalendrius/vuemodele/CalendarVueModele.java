package com.example.multuscalendrius.vuemodele;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.example.multuscalendrius.modeles.entitees.Calendrier;
import com.example.multuscalendrius.modeles.entitees.Element;
import com.example.multuscalendrius.modeles.entitees.Evenement;

import java.time.LocalDateTime;

public class CalendarVueModele {

    private final MutableLiveData<Calendrier> calendrierLiveData = new MutableLiveData<>(new Calendrier());

    public LiveData<Calendrier> getCalendrier() {
        return calendrierLiveData;
    }

    public void setCalendrier(Calendrier calendrier) {
        calendrierLiveData.setValue(calendrier);
    }

    private void notifyCalendrierObservers() {
        calendrierLiveData.setValue(calendrierLiveData.getValue());
    }

    public void fetchById(int id) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.fetchById(id, this::notifyCalendrierObservers);
        }
    }

    public void createCalendrier(String nom, String description) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.syncCreate(nom, description, this::notifyCalendrierObservers);
        }
    }

    public void updateCalendrier(String nom, String description, String auteur) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.syncUpdate(nom, description, auteur, this::notifyCalendrierObservers);
        }
    }

    public void deleteCalendrier() {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.syncDelete(this::notifyCalendrierObservers);
        }
    }

    public void ajouterEvenement(String titre, String description) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.addEvenement(titre, description, this::notifyCalendrierObservers);
        }
    }

    public void modifierEvenement(Evenement evenement, String titre, String description) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.updateEvenement(evenement, titre, description, this::notifyCalendrierObservers);
        }
    }

    public void supprimerEvenement(Evenement evenement) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.deleteEvenement(evenement, this::notifyCalendrierObservers);
        }
    }

    public void ajouterElement(String nom, String description, Evenement evenement, LocalDateTime dateDebut, LocalDateTime dateFin) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.addElement(nom, description, evenement, dateDebut, dateFin, this::notifyCalendrierObservers);
        }
    }

    public void modifierElement(Element element, String nom, String description, int evenementId) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.updateElement(element, nom, description, evenementId, this::notifyCalendrierObservers);
        }
    }

    public void supprimerElement(Element element) {
        Calendrier cal = calendrierLiveData.getValue();
        if (cal != null) {
            cal.deleteElement(element, this::notifyCalendrierObservers);
        }
    }
}

/*
private CalendrierViewModel viewModel;
private TextView statusTextView; // Assure-toi de lier √ßa √† ta vue dans le layout

@Override
public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
    super.onViewCreated(view, savedInstanceState);

    viewModel = new ViewModelProvider(requireActivity()).get(CalendrierViewModel.class);

    statusTextView = view.findViewById(R.id.statusTextView); // ou ton ID r√©el

    // Observer les changements du calendrier
    viewModel.getCalendrier().observe(getViewLifecycleOwner(), calendrier -> {
        if (calendrier == null) {
            statusTextView.setText("Aucun calendrier disponible");
            return;
        }

        switch (calendrier.getOperation()) {
            case CREATION:
                statusTextView.setText("‚úÖ Calendrier cr√©√© : " + calendrier.getNom());
                ajouterElementExemple(); // Ajoute un √©l√©ment apr√®s cr√©ation
                break;
            case MISE_A_JOUR:
                statusTextView.setText("‚úÖ Calendrier mis √† jour : " + calendrier.getNom());
                break;
            case SUPPRESSION:
                statusTextView.setText("‚ùå Calendrier supprim√©");
                break;
            case AJOUT_EVENEMENT:
                statusTextView.setText("üóìÔ∏è √âv√©nement ajout√©");
                break;
            case MISE_A_JOUR_EVENEMENT:
                statusTextView.setText("‚úèÔ∏è √âv√©nement mis √† jour");
                break;
            case SUPPRESSION_EVENEMENT:
                statusTextView.setText("üóëÔ∏è √âv√©nement supprim√©");
                break;
            case AJOUT_ELEMENT:
                statusTextView.setText("üìå √âl√©ment ajout√©");
                break;
            case MISE_A_JOUR_ELEMENT:
                statusTextView.setText("‚úèÔ∏è √âl√©ment mis √† jour");
                break;
            case SUPPRESSION_ELEMENT:
                statusTextView.setText("üóëÔ∏è √âl√©ment supprim√©");
                break;
            case ERREUR:
                statusTextView.setText("‚ùå Erreur : " + calendrier.getErrorMessage());
                break;
            case AUTRE:
            default:
                statusTextView.setText("‚ÑπÔ∏è Op√©ration non sp√©cifi√©e");
                break;
        }
    });

    // D√©marrer la cr√©ation du calendrier
    Calendrier calendrierActuel = viewModel.getCalendrier().getValue();
    if (calendrierActuel != null && calendrierActuel.getId() == 0) {
        viewModel.createCalendrier("Mon projet", "Calendrier de travail");
    }
}

private void ajouterElementExemple() {
    Calendrier calendrier = viewModel.getCalendrier().getValue();
    if (calendrier != null) {
        List<Evenement> evenements = calendrier.getEvenements();
        if (!evenements.isEmpty()) {
            Evenement evenement = evenements.get(0);
            viewModel.ajouterElement(
                "Cr√©er le backend",
                "T√¢che initiale",
                evenement,
                LocalDateTime.now(),
                LocalDateTime.now().plusDays(2)
            );
        } else {
            statusTextView.setText("‚ö†Ô∏è Aucun √©v√©nement pour associer un √©l√©ment.");
        }
    }

}

 */
